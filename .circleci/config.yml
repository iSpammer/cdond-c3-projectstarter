version: 2.1
orbs: 
  slack: circleci/slack@4.9.3
  
commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.stackId >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.stackId >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.stackId >>  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      
      - notify_slack_error
      - notify_slack_pass


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - notify_slack_error
      - notify_slack_pass
   
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontennd
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            # npm audit fix --force
            # npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install needed os utilities
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags "project=udapeople-backend-udapeople-xd47467dhjppmz437" \
              --stack-name "udapeople-backend-udapeople-xd47467dhjppmz437" \
              --parameter-overrides ID="udapeople-xd47467dhjppmz437"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags "project=udapeople-frontend--udapeople-xd47467dhjppmz437" \
              --stack-name "udapeople-frontend-udapeople-xd47467dhjppmz437" \
              --parameter-overrides ID="udapeople-xd47467dhjppmz437" 
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls -altr
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-udapeople-xd47467dhjppmz437" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            echo "inventory.txt"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stackId: udapeople-xd47467dhjppmz437


  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Meaw*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
            

workflows:
  default:
    jobs:
      - notify
      - build-frontend
      
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
