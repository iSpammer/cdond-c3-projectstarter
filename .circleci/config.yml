version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.2.1
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install ansible

  install_nodejs:
    description: Install Node.js 18
    steps:
      - run:
          name: Install Node.js 18
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1              
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front-end test build
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test build
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: udacity
          event: fail
          template: basic_fail_1              
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit front end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
  scan-backend:
    docker :
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exsist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      - run:
          name: Ensure front-end infracture exsist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --tag project=udapeople
      - run:
          name: Retrive beckend ip (save it to ansible inventory)
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_PUBLIC_IP:3030" >> .circleci/backend_public_url.txt
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/backend_public_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['c3:35:83:c8:2a:cb:30:f6:21:2f:34:51:a3:18:b5:48'] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd ~/project/.circleci/ansible
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
 
 
  run-migration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migration_output
            echo "Migration Result:------"
            
      - run:
          name: check results
          command: |
            cd ~/project/backend
            if grep -q "has been executed successfully" migration_output
            then
              curl https://kvdb.io/GxHhCz2fFMCPcvmo4u3Avn/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      
      - run:
          name: Install Node.js 18
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["c3:35:83:c8:2a:cb:30:f6:21:2f:34:51:a3:18:b5:48"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip    
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install aws
          command: |    
            pip install awscli --upgrade   
            aws --version       
          
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-1.amazonaws.com/index.html#/employees"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi   
      - destroy-environment
      - revert-migrations                 
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-stack \
              --use-previous-template --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
      - destroy-environment
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - run:
            name: Clean old stacks
            command: |
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))               
              echo Stack names: "${STACKS[@]}"
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                echo "Removing old Stacks#....${OldWorkflowID}"
                echo "s3://udapeople-${OldWorkflowID}"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"                        
              else
                echo "There is no old stacks needs to be cleaned up"
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]          
      - configure-infrastructure:
          requires: [deploy-infrastructure]          
      - run-migration:
          requires: [configure-infrastructure]          
      - deploy-frontend:
          requires: [run-migration]          
      - deploy-backend:
          requires: [run-migration]          
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]          
      - cloudfront-update:
          requires: [smoke-test]              
      - cleanup:
          requires: [cloudfront-update]
